#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================
# 工作流名称：构建 name 固件
name: 编译immortalwrt固件r66s—master

# 触发条件
on:
    ## 支持手动触发
  repository_dispatch:
  workflow_dispatch:
## 定时触发：每天 14:00 UTC 执行
  # schedule:
  #  - cron: 0 14 * * *
  ## 当有人 star 仓库时触发
  # watch:
  # types: started
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      CACHE_BUILD:
          description: '缓存加速'
          required: false
          default: 'true'
          type: boolean

# 全局环境变量
env:
   # 源码仓库来源
  REPO_URL: https://github.com/immortalwrt/immortalwrt
##  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x
  # 分支
  REPO_BRANCH: master
  ## 配置文件
 # CONFIG_FILE: immortalwrt/mediatek/defconfig
  CONFIG_FILE: configs/R66S.config
  ##自定义配置
  DIY_P1_SH: diy-imm-part1.sh
  DIY_P2_SH: diy-part2.sh
  ## 固件name
  Firmware_Name: immortalwrt-R66S
  # 是否缓存编译工具链
  CACHE_TOOLCHAIN: true
  # 是否上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_BIN_DIR: false
  #上传固件目录。默认true（建议打开，不然编译好没有固件）
  UPLOAD_FIRMWARE: true

  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  # 上传固件到 releases 。默认false
  UPLOAD_RELEASE: false
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai
#  OPENWRT_NAME: immortalwrt
#  OPENWRT_DEVICE: rockchip

# 工作流任务
jobs:
  build:
    runs-on: ubuntu-22.04
    # 仅允许仓库所有者触发，或者是首次触发
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
   # 构建任务名称，显示目标架构和 OpenWrt 版本
    name: build ${{ matrix.target }} ${{ matrix.openwrt }}
#
    strategy:
   #   # 允许部分任务失败
      fail-fast: false
      # 构建矩阵：不同目标和 OpenWrt 版本组合
    #  matrix:
   #   target: [armv8]
   #   openwrt: [lede, immortalwrt]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
  
   
    - name: Initialize compilation environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo -E apt-get -y install clang
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: Update & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
 
    - name: Load feeds.conf.default
      run: |
        chmod +x $OPENWRT_NAME/*.sh
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Load config
      run: |
        [ -e "$CONFIG_FILE" ] && cat "$CONFIG_FILE" > openwrt/.config
        chmod +x $OPENWRT_NAME/*.sh && cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download the installation package
      id: package
      run: |
        cd openwrt
        make defconfig
#cat .config
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "date1=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date2=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
 
    - name: Upload the firmware to github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.OPENWRT_DEVICE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tags
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "📥 固件下载" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Publish to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt