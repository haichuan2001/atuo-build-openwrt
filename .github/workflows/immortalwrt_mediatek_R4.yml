#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================
# 工作流名称：构建 name 固件#
name: 编译immortalwrt/padavanonly-R4

# 触发条件
# 触发条件
on:
    ## 支持手动触发
  repository_dispatch:
  workflow_dispatch:
## 定时触发：每天 14:00 UTC 执行
  # schedule:
  #  - cron: 0 14 * * *
  ## 当有人 star 仓库时触发
  # watch:
  # types: started
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

        CACHE_BUILD:
          description: '缓存加速'
          required: false
          default: 'true'
          type: boolean
# 全局环境变量
env:
  # 源码仓库来源
#  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x
    # 分支
  REPO_BRANCH: mt7988
 # CONFIG_FILE: immortalwrt/mediatek/defconfig
  CONFIG_FILE: configs/lean/R4.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  Firmware_Name: immortalwrt/padavanonly-BPI-R4
  # Clash 内核架构
  CLASH_KERNEL: arm64
  # 是否缓存编译工具链
  CACHE_TOOLCHAIN: true
  # 是否上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_BIN_DIR: false
  #上传固件目录。默认true（建议打开，不然编译好没有固件）
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  # 上传固件到 releases 。默认false
  UPLOAD_RELEASE: false
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai
#  OPENWRT_NAME: immortalwrt
#  OPENWRT_DEVICE: mediatek

# 工作流任务
jobs:
  build:
    runs-on: ubuntu-22.04
    # 仅允许仓库所有者触发，或者是首次触发
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
   # 构建任务名称，显示目标架构和 OpenWrt 版本
    name: build ${{ matrix.target }} ${{ matrix.openwrt }}
#
    strategy:
   #   # 允许部分任务失败
      fail-fast: false
      # 构建矩阵：不同目标和 OpenWrt 版本组合
    #  matrix:
   #   target: [armv8]
   #   openwrt: [lede, immortalwrt]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Free Disk Space
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* \
          lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
          /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* \
          /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* \
          /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
          /var/lib/mysql* /var/log/azure*"
        testing: false


##: 初始化系统环境
    - name: Initialize the compilation environment
      env:
# 设置无交互模式
        DEBIAN_FRONTEND: noninteractive  
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android* rename speedtest-cli
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    


    - name: Initialize Environment and Display System Info
      env:
       DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x $OPENWRT_NAME/*.sh
        $GITHUB_WORKSPACE/$OPENWRT_NAME/system-Information.sh

    - name: Download firmware source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
 
    - name: Load feeds.conf.default
      run: |
        chmod +x $OPENWRT_NAME/*.sh
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Load config
      run: |
        [ -e "$CONFIG_FILE" ] && cat "$CONFIG_FILE" > openwrt/.config
        chmod +x $OPENWRT_NAME/*.sh && cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download the installation package
      id: package
      run: |
        cd openwrt
        make defconfig
        cat .config
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "date1=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date2=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize and Rename Files
      id: organize
      if: ${{ env.UPLOAD_FIRMWARE == 'true' && !cancelled() }}
      run: |
        cd openwrt/bin/targets/mediatek/filogic
        rm -rf packages *mt798* *.config *.buildinfo *.json sha256sums 
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
 
    - name: Upload the firmware to github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.OPENWRT_DEVICE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tags
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "📥 固件下载" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Publish to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt